commit 091223b3755c9c7a6a2eccf1811da1f92aa59c6a
Author: Jipan Yang <jipan.yang@alibaba-inc.com>
Date:   Wed Aug 22 19:15:57 2018 -0700

    Force disable MII isolate mode for bcm54616

diff --git a/drivers/net/ethernet/intel/igb/e1000_82575.c b/drivers/net/ethernet/intel/igb/e1000_82575.c
index d9aaa13..05efcfb 100644
--- a/drivers/net/ethernet/intel/igb/e1000_82575.c
+++ b/drivers/net/ethernet/intel/igb/e1000_82575.c
@@ -1663,6 +1663,9 @@ static s32 igb_setup_copper_link_82575(struct e1000_hw *hw)
 		ret_val = igb_copper_link_setup_82580(hw);
 		break;
 	case e1000_phy_bcm54616:
+		if (e1000_disable_mii_isolate_bcm54616(hw) != 0) {
+			hw_dbg("Disable bcm54616 PHY MII isolate mode failed.\n");
+		}
 		break;
 	default:
 		ret_val = -E1000_ERR_PHY;
diff --git a/drivers/net/ethernet/intel/igb/e1000_phy.c b/drivers/net/ethernet/intel/igb/e1000_phy.c
index 2788a54..69f68c7 100644
--- a/drivers/net/ethernet/intel/igb/e1000_phy.c
+++ b/drivers/net/ethernet/intel/igb/e1000_phy.c
@@ -930,6 +930,22 @@ out:
 	return ret_val;
 }
 
+s32 e1000_disable_mii_isolate_bcm54616(struct e1000_hw *hw)
+{
+	struct e1000_phy_info *phy = &hw->phy;
+	s32 ret_val;
+	u16 phy_data;
+
+	ret_val = phy->ops.read_reg(hw, PHY_CONTROL, &phy_data);
+	if (ret_val)
+		return ret_val;
+	// MII_CR_ISOLATE 0x0400	/* Isolate PHY from MII */
+	phy_data &=~(0x0400);
+	ret_val = phy->ops.write_reg(hw, PHY_CONTROL, phy_data);
+
+	return ret_val;
+}
+
 /**
  *  igb_phy_setup_autoneg - Configure PHY for auto-negotiation
  *  @hw: pointer to the HW structure
diff --git a/drivers/net/ethernet/intel/igb/e1000_phy.h b/drivers/net/ethernet/intel/igb/e1000_phy.h
index 9b622b3..0185179 100644
--- a/drivers/net/ethernet/intel/igb/e1000_phy.h
+++ b/drivers/net/ethernet/intel/igb/e1000_phy.h
@@ -42,6 +42,7 @@ s32  igb_check_reset_block(struct e1000_hw *hw);
 s32  igb_copper_link_setup_igp(struct e1000_hw *hw);
 s32  igb_copper_link_setup_m88(struct e1000_hw *hw);
 s32  igb_copper_link_setup_m88_gen2(struct e1000_hw *hw);
+s32  e1000_disable_mii_isolate_bcm54616(struct e1000_hw *hw);
 s32  igb_phy_force_speed_duplex_igp(struct e1000_hw *hw);
 s32  igb_phy_force_speed_duplex_m88(struct e1000_hw *hw);
 s32  igb_get_cable_length_m88(struct e1000_hw *hw);
